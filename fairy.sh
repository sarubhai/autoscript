# vi fairy.sh
# chmod +x fairy.sh
# ./fairy.sh
# REMEMBER TO CHANGE SITENAME & SITEUSER

#!/bin/bash
#
# Install and configures NGINX server
# Written by Akash Mitra (akash.mitra@gmail.com)
#
# Written for Ubuntu 18.10 LTS
# Version 0.5
#
# No implicit or explicit guarantee assured, use in your own risk
#

VERSION="0.5"
set -o pipefail

# Environment variables - setting default log level to info
[ -z "${LOG_LEVEL}" ] && LOG_LEVEL="6" # 7 = debug -> 0 = emergency
__DIR__="$(cd "$(dirname "${0}")"; echo $(pwd))"
__BASE__="$(basename "${0}")"
__FILE__="${__DIR__}/${__BASE__}"
export DEBIAN_FRONTEND=noninteractive

# generic functions
# -----------------------------------------------------------------------------

# Logging functions based on type of messages
function critical ()  { [ "${LOG_LEVEL}" -ge 2 ] && log "FATAL ERROR: $1" || true; }
function error ()     { [ "${LOG_LEVEL}" -ge 3 ] && log "ERROR: $1" || true; }
function warning ()   { [ "${LOG_LEVEL}" -ge 4 ] && log "WARNING: $1" || true; }
function info ()      { [ "${LOG_LEVEL}" -ge 6 ] && log "$1" || true; }
function debug ()     { [ "${LOG_LEVEL}" -ge 7 ] && log "DEBUG: $1" || true; }
function log () { echo "`hostname` | `date '+%F | %H:%M:%S |'` $1"; }
function If_Error_Exit () {
  if [ $? -ne 0 ]; then
    critical "${@}"
    exit -1
  fi
}
# Information gathered here will be emailed to the user later
function gather () {
  echo "[*] ${@}" >> /root/you_must_read_me.txt
}
function update_change_log () {
  echo "${CHANGE_ID} | `date "+%F | %H:%M:%S"` | $1 | $2"  >> /root/system_change_log
  ((GLOBAL_CHANGE_ID++))
  printf -v CHANGE_ID "%05d" $GLOBAL_CHANGE_ID
  CHANGE_STAMP="Line modified by Fairy below. Refer ${CHANGE_ID}"
}

# generic variables
# -----------------------------------------------------------------------------

# default parameters

WEBROOT='/srv'
PORT=80
APC_CACHE_MEM_SIZE="64M"
PHP_POST_MAX_SIZE="4M"
FPM_POOL_DIR="/etc/php/7.2/fpm/pool.d"
MEMCACHED_CONFIG="/etc/memcached.conf"
FASTCGI_PARAM="/etc/nginx/fastcgi_params"
MARIA_DB_SIGNING_KEY="0xF1656F24C74CD1D8"
MARIA_DB_VERSION="10.3"
FLAVOR="bionic"
CHANGE_ID="00001"
GLOBAL_CHANGE_ID=1
CHANGE_STAMP="Line modified by Fairy below. Refer 00001"
PHP_SERVER_CONFIG="/etc/php/7.2/fpm/php.ini"
MEMCACHED_IPC_SOCKET_PATH="/tmp/memcached.sock"
COMPOSER=1  # installs PHP Composer
DO=1        # change to 1 if installing in Digital Ocean
LARAVEL=1   # change to 1 if you want to install laravel (untested feature, use at your own risk)
REDIS=0     # change to 1 if you want to install redis server 
SSL=0       # TO-DO SSL Automation
SSL_PORT=443

# configurable parameters

SITENAME='gridcompute.com'
SITEUSER='gridcompute'
# sample value of the below variable can be 'files' or 'memcached' etc.
PHP_SESSION_HANDLER="memcached"
# leave this variable blank if you wish memcached to use Unix domain socket
MEMCACHED_TCP_PORT=""
# Specify PHP session.save_path when PHP_SESSION_HANDLER is neither files or
# memcached. This can be left empty if PHP_SESSION_HANDLER is files or memcached
SESSION_SAVE_PATH=""
# specify an SSH connection port. Leave this blank if you want to continue with the default port (22)
SSH_PORT=2222

# check if root, if not get out
if [ `id -u` != "0" ]; then
  help "Run this ${__FILE__} as root"
  exit -1
else
  info "Initiating Setup script version: $VERSION as root"
fi


# This is generic package update and upgrade script
# -----------------------------------------------------------------------------

info "Updating System"
apt-get --assume-yes --quiet  install language-pack-en >> /dev/null
export LANGUAGE=en_US.UTF-8
export LANG=en_US.UTF-8
export LC_ALL=en_US.UTF-8
locale-gen en_US.UTF-8                                  >> /dev/null
dpkg-reconfigure locales                                >> /dev/null
apt-get --assume-yes --quiet  update                    >> /dev/null
apt-get --assume-yes --quiet  upgrade                   >> /dev/null
If_Error_Exit "Failed to update the system"
echo "-----------------------------------------------------------------------" >> /root/you_must_read_me.txt
echo "READ ME                                                                " >> /root/you_must_read_me.txt
echo "Generated by Fairy Version ${VERSION} Automated installation script    " >> /root/you_must_read_me.txt
echo "Date: `date '+%F | %H:%M'`. (c) Akash Mitra [intellip@gmail.com]     " >> /root/you_must_read_me.txt
echo "-----------------------------------------------------------------------" >> /root/you_must_read_me.txt
gather "IMPORTANT: Refer file /root/system_change_log for details of configuration changes"
gather "System Details: `uname -a`"
#gather "IP address is : `ifconfig eth0 | grep "inet " | cut -d':' -f2 | cut -d' ' -f1`"
gather "IP address is : `ifconfig ens3 | grep "inet " | awk '{print $2}'`"



#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
#                          Environment related tweaks                         #
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
if [ $DO -eq 1 ]; then

  info "Resolving a locale issue..."
  echo 'LC_ALL="en_US.UTF-8"' >> /etc/environment # stops the pesky LC_ALL issue after restart

  info "Adding some swap space..."
  fallocate -l 1G /swapfile # creates SWAP space
  chmod 600 /swapfile
  mkswap /swapfile
  swapon /swapfile
  echo '/swapfile none swap sw 0 0' | sudo tee -a /etc/fstab
  sysctl vm.swappiness=10
  sysctl vm.vfs_cache_pressure=50
  echo 'vm.swappiness=10' | sudo tee -a /etc/sysctl.conf
  echo 'vm.vfs_cache_pressure=50' | sudo tee -a /etc/sysctl.conf
fi


#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
#                                INSTALL NGINX                                #
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#

# install nginx
# -----------------------------------------------------------------------------

# adding nginx repo to Ubuntu's source
# info "Adding nginx repo to Ubuntu's source"
# add-apt-repository --yes ppa:nginx/development   2>&1 1> /dev/null
info "Installing nginx"
apt-get --assume-yes --quiet update                   >> /dev/null
apt-get --assume-yes --quiet install nginx            >> /dev/null
If_Error_Exit "Unable to install Nginx"
info "Nginx Installed"

# create user, directory structure and files for webserver
info "Creating user [${SITEUSER}] and web directory [${WEBROOT}/${SITENAME}]"
mkdir -p /opt/skel/logs
mkdir -p /opt/skel/public
[ -d ${WEBROOT} ] || mkdir ${WEBROOT}
useradd -b ${WEBROOT} -d ${WEBROOT}/${SITENAME} -m -k /opt/skel -s /bin/false ${SITEUSER}
If_Error_Exit "Unable to create user [${SITEUSER}]"
info "User ${SITEUSER} created for web directory ${WEBROOT}/${SITENAME}"

chmod 755 ${WEBROOT}/${SITENAME}
# create a test file
echo "This is a static file for testing" > ${WEBROOT}/${SITENAME}/public/index.html
# change ownership
chown ${SITEUSER}:${SITEUSER} ${WEBROOT}/${SITENAME}/public/*


# create a server block for nginx
# -----------------------------------------------------------------------------

info "Configuring nginx server block"
echo "server {"                                                                >  /etc/nginx/sites-available/${SITENAME}
echo "        listen ${PORT};"                                                 >> /etc/nginx/sites-available/${SITENAME}
echo "        server_name ${SITENAME} www.${SITENAME};"                        >> /etc/nginx/sites-available/${SITENAME}
echo "        root ${WEBROOT}/${SITENAME}/public;"                             >> /etc/nginx/sites-available/${SITENAME}
echo "        access_log ${WEBROOT}/${SITENAME}/logs/access.log;"              >> /etc/nginx/sites-available/${SITENAME}
echo "        error_log  ${WEBROOT}/${SITENAME}/logs/error.log;"               >> /etc/nginx/sites-available/${SITENAME}
echo "        index index.html index.php;"                                     >> /etc/nginx/sites-available/${SITENAME}
echo "        location / {"                                                    >> /etc/nginx/sites-available/${SITENAME}
echo "                try_files \$uri \$uri/ /index.php?\$query_string;"       >> /etc/nginx/sites-available/${SITENAME}
echo "        }"                                                               >> /etc/nginx/sites-available/${SITENAME}
echo ""                                                                        >> /etc/nginx/sites-available/${SITENAME}
echo "        location ~ /\. { access_log off; log_not_found off; deny all; }" >> /etc/nginx/sites-available/${SITENAME}
echo "        location ~ ~$ { access_log off; log_not_found off; deny all; }"  >> /etc/nginx/sites-available/${SITENAME}
echo "}"                                                                       >> /etc/nginx/sites-available/${SITENAME}
rm -f /etc/nginx/sites-enabled/default
ln -sf /etc/nginx/sites-available/${SITENAME} /etc/nginx/sites-enabled/${SITENAME}
#/etc/init.d/nginx reload
systemctl reload nginx
If_Error_Exit "Can not enable server [${SITENAME}]"
info "${SITENAME} Enabled successfully"
gather "Root directory of ${SITENAME} is located at ${WEBROOT}/${SITENAME}/public"



#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
#                                INSTALL PHP                                  #
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#

info "Updating package lists"
apt-get --assume-yes --quiet update                                                          >> /dev/null

info "Installing PHP with FastCGI Process Manager (PHP-FPM)"
#apt-get --assume-yes --quiet install php-fpm php-gd php-apcu php-mcrypt php-cli php-curl 2>&1 1> /dev/null
apt-get --assume-yes --quiet install php-fpm php-gd php-apcu php-zip php-cli php-curl   2>&1 1> /dev/null
#apt-get --assume-yes --quiet install php7.3-fpm php7.3-gd php-apcu php-mcrypt php-cli php7.3-curl 2>&1 1> /dev/null
If_Error_Exit "Can not install PHP fpm"
info "PHP FPM installed successfully"
info "Installing memcached for PHP caching"
apt-get --assume-yes --quiet install memcached php-memcached                            2>&1 1> /dev/null
If_Error_Exit "Memcached installation failed"

# configuring php settings
# -----------------------------------------------------------------------------

info "Configuring PHP settings"
info "... setting PHP maximum post size to ${PHP_POST_MAX_SIZE}"
sed -i "s/^post_max_size =.*$/; ${CHANGE_STAMP} \npost_max_size = ${PHP_POST_MAX_SIZE}/" $PHP_SERVER_CONFIG
update_change_log "$PHP_SERVER_CONFIG" "set PHP maximum post size to ${PHP_POST_MAX_SIZE}"

info "... setting PHP's session cache handler to $PHP_SESSION_HANDLER"
sed -i "s/^.*session.save_handler = .*$/; ${CHANGE_STAMP} \nsession.save_handler = ${PHP_SESSION_HANDLER}/g" $PHP_SERVER_CONFIG
update_change_log "$PHP_SERVER_CONFIG" "set PHP's session handler to ${PHP_SESSION_HANDLER}"

if [ "${PHP_SESSION_HANDLER}" == "files" ]; then
  info "... creating directory structure to store PHP session data"
  mkdir -p ${WEBROOT}/temp/${SITENAME}
  chown ${SITEUSER}:${SITEUSER} ${WEBROOT}/temp/${SITENAME}
  SESSION_SAVE_PATH="${WEBROOT}/temp/${SITENAME}"
else
  if [ "${PHP_SESSION_HANDLER}" == "memcached" ]; then

    # check if memcached configured to listen to Unix socket or TCP socket
    if [ "${MEMCACHED_TCP_PORT}" == "" ]; then
      # we are using Unix Socket
      info "... creating IPC channel (Unix socket) between memcached and PHP"
      SESSION_SAVE_PATH="${MEMCACHED_IPC_SOCKET_PATH}:0"
    else
      # we are using TCP socket
      info "... creating TCP connection between memcached and PHP"
      SESSION_SAVE_PATH="127.0.0.1:${MEMCACHED_TCP_PORT}"
    fi
  else

    # we are not using files or memcached
    warning "Neither files or memcached is used for PHP session handling"
  fi
fi

info "... setting session save_path to ${SESSION_SAVE_PATH}"
sed -i "s~^;session.save_path =.*$~; ${CHANGE_STAMP} \nsession.save_path = ${SESSION_SAVE_PATH}~" $PHP_SERVER_CONFIG
update_change_log "$PHP_SERVER_CONFIG" "set PHP's session save_path to ${SESSION_SAVE_PATH}"



info "... Creating a dummy php file for test"
echo "<HTML><HEAD><TITLE>Fairy $VERSION - PHP Test Page</TITLE></HEAD>"        > ${WEBROOT}/${SITENAME}/public/info.php
echo "<BODY><CENTER><H1>Test Page</H1><H6>Fairy Version $VERSION</H6><HR />"   >> ${WEBROOT}/${SITENAME}/public/info.php
echo "<?php echo 'Current script owner: ' . get_current_user() . '<br />' . 'Server: ' . \$_SERVER['SERVER_ADDR']; ?> " >> ${WEBROOT}/${SITENAME}/public/info.php
echo "</CENTER></BODY></HTML>"                                                 >> ${WEBROOT}/${SITENAME}/public/info.php
echo "<?php phpinfo(); ?>"                                                     >> ${WEBROOT}/${SITENAME}/public/info_.php
# change ownership
chown ${SITEUSER}:${SITEUSER} ${WEBROOT}/${SITENAME}/public/*
gather "Some dummy files are created for testing in website's root directory: index.html, info.php, info_.php"
gather "DO NOT FORGET TO DELETE THE ABOVE FILES ONCE YOUR SERVER IS TESTED OK"


# configuring APC setting
# -----------------------------------------------------------------------------

info "Setting APC's (PHP's opcode cache) memory size to ${APC_CACHE_MEM_SIZE}"
echo "${CHANGE_STAMP}"  >> /etc/php/7.2/mods-available/apcu.ini
echo "apc.shm_size = ${APC_CACHE_MEM_SIZE}" >> /etc/php/7.2/mods-available/apcu.ini
update_change_log "/etc/php/7.2/mods-available/apcu.ini" "setting APC's memory size to ${APC_CACHE_MEM_SIZE}"
# apc.enabled=1
# apc.shm_segments=1
# apc.shm_size=64M
# apc.ttl=7200
# apc.user_ttl=7200
# apc.gc_ttl=3600
# apc.max_file_size=1M
# apc.write_lock = 1
# apc.slam_defense = 0


# configuring php-fpm pool setting
# -----------------------------------------------------------------------------

info "Configuring nginx php-fpm pool"
cp ${FPM_POOL_DIR}/www.conf ${FPM_POOL_DIR}/${SITENAME}.conf

info "... renaming pool block to [${SITENAME}]"
sed -i "s/^\[www\]$/\[${SITENAME}\]/" ${FPM_POOL_DIR}/${SITENAME}.conf

info "... changing unix user and group"
sed -i "s/^user = www-data$/; ${CHANGE_STAMP} \nuser = ${SITEUSER}/" ${FPM_POOL_DIR}/${SITENAME}.conf
sed -i "s/^group = www-data$/group = ${SITEUSER}/" ${FPM_POOL_DIR}/${SITENAME}.conf
update_change_log "${FPM_POOL_DIR}/${SITENAME}.conf" "change user and group name to ${SITEUSER}"
info "... changing unix listen socket"
sed -i "s|^listen = /run/php/php7.2-fpm.sock$|; Test \nlisten = /var/run/php/php7.2-fpm.${SITEUSER}.sock|" ${FPM_POOL_DIR}/${SITENAME}.conf
update_change_log "${FPM_POOL_DIR}/${SITENAME}.conf" "change listen socket to /var/run/php/php7.2-fpm.${SITEUSER}.sock"
#sed -i "s/^listen.owner = www-data$/; ${CHANGE_STAMP} \nlisten.owner = ${SITEUSER}/" ${FPM_POOL_DIR}/${SITENAME}.conf
#sed -i "s/^listen.group = www-data$/listen.group = ${SITEUSER}/" ${FPM_POOL_DIR}/${SITENAME}.conf
sed -i "s/^;listen.mode = 0660$/listen.mode = 0660/" ${FPM_POOL_DIR}/${SITENAME}.conf
update_change_log "${FPM_POOL_DIR}/${SITENAME}.conf" "change listen.mode to 0660"

info "... adjusting buffer allocation by nginx for FastCGI"
echo ""                                                     >> ${FASTCGI_PARAM}
echo "# ${CHANGE_STAMP}"                                    >> ${FASTCGI_PARAM}
echo "fastcgi_buffer_size          128k;"                   >> ${FASTCGI_PARAM}
echo "fastcgi_buffers              4 256k;"                 >> ${FASTCGI_PARAM}
echo "fastcgi_busy_buffers_size    256k;"                   >> ${FASTCGI_PARAM}
update_change_log "${FASTCGI_PARAM}" "Added fastcgi buffer size parameters"

debug "Backup the current www.conf from ${FPM_POOL_DIR}"
mv ${FPM_POOL_DIR}/www.conf ${FPM_POOL_DIR}/default.conf.bkp



# configuring memcached setting
# -----------------------------------------------------------------------------

info "Configure memcached setting"
if [ "${MEMCACHED_TCP_PORT}" == "" ]; then

  # to be configured for Unix domain socket connection

  sed -i "/-p 11211/ s/^#*/# ${CHANGE_STAMP} \n#/"     ${MEMCACHED_CONFIG}
  update_change_log "${MEMCACHED_CONFIG}" "Commenting out port switch (-p) as Unix socket will be used"

  sed -i "/-l 127.0.0.1/ s/^#*/# ${CHANGE_STAMP} \n#/" ${MEMCACHED_CONFIG}
  update_change_log "${MEMCACHED_CONFIG}" "Commenting out listen switch (-l) as Unix socket will be used"

  echo ""                                >> ${MEMCACHED_CONFIG}
  echo "# ${CHANGE_STAMP}"               >> ${MEMCACHED_CONFIG}
  echo "-s ${MEMCACHED_IPC_SOCKET_PATH}" >> ${MEMCACHED_CONFIG}
  echo "-a 0755"                         >> ${MEMCACHED_CONFIG}
  update_change_log "${MEMCACHED_CONFIG}" "Setting unix socket to ${MEMCACHED_IPC_SOCKET_PATH}"

else

  # to be configured for TCP connection

  sed -i "s/^-p 11211.*$/# ${CHANGE_STAMP} \n-p ${MEMCACHED_TCP_PORT}/"     ${MEMCACHED_CONFIG}
  update_change_log "${MEMCACHED_CONFIG}" "Changing memcached port to ${MEMCACHED_TCP_PORT}"

fi



# Turning on PHP for virtual hosting
# -----------------------------------------------------------------------------

info "Turning on PHP for virtual hosting"
info "... configuring Nginx to talk to PHP using Unix socket"
info "... defining upstream variable [php-fpm-sock] under [/etc/nginx/conf.d/]"
echo "upstream php-fpm-sock {"                                    > /etc/nginx/conf.d/php-sock.conf
echo "    server unix:/var/run/php/php7.2-fpm.${SITEUSER}.sock;"  >> /etc/nginx/conf.d/php-sock.conf
echo "}"                                                          >> /etc/nginx/conf.d/php-sock.conf
info "... preparing the virtual host file under sites-available"
sed -i '$ d' /etc/nginx/sites-available/${SITENAME}
echo ""                                                                                     >> /etc/nginx/sites-available/${SITENAME}
echo "        location ~ \.php$ {"                                                          >> /etc/nginx/sites-available/${SITENAME}
echo "                try_files \$uri =404;"                                                >> /etc/nginx/sites-available/${SITENAME}
echo "                include /etc/nginx/fastcgi_params;"                                   >> /etc/nginx/sites-available/${SITENAME}
echo "                fastcgi_pass php-fpm-sock;"                                           >> /etc/nginx/sites-available/${SITENAME}
echo "                fastcgi_param SCRIPT_FILENAME \$document_root\$fastcgi_script_name;"  >> /etc/nginx/sites-available/${SITENAME}
echo "                fastcgi_intercept_errors on;"                                         >> /etc/nginx/sites-available/${SITENAME}
echo "        }"                                                                            >> /etc/nginx/sites-available/${SITENAME}
echo "}"                                                                                    >> /etc/nginx/sites-available/${SITENAME}

# restarting services
info "Restarting services"
systemctl restart nginx
If_Error_Exit "Web server failed to restart"
service php7.2-fpm restart
If_Error_Exit "PHP Fpm failed to restart"
service memcached restart
If_Error_Exit "Memcached failed to restart"





#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
#                        INSTALL DATABASE (MARIA DB)                          #
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#

info "Installing Database"

# adding MariaDB repo to source
# -----------------------------------------------------------------------------

info "... add the MariaDB repository to our sources list"
# refer https://mariadb.com/kb/en/installing-mariadb-deb-files/
apt-key adv --recv-keys --keyserver keyserver.ubuntu.com $MARIA_DB_SIGNING_KEY                   2>&1 1> /dev/null
If_Error_Exit "Can not add the signing key"
echo ""                                                                                          >> /etc/apt/sources.list
echo "# ${CHANGE_STAMP}"                                                                         >> /etc/apt/sources.list
echo "# MariaDB ${MARIA_DB_VERSION} repository list"                                                             >> /etc/apt/sources.list
echo "# http://downloads.mariadb.org/mariadb/repositories/"                                      >> /etc/apt/sources.list
echo "deb http://ftp.osuosl.org/pub/mariadb/repo/${MARIA_DB_VERSION}/ubuntu ${FLAVOR} main"      >> /etc/apt/sources.list
echo "deb-src http://ftp.osuosl.org/pub/mariadb/repo/${MARIA_DB_VERSION}/ubuntu ${FLAVOR} main"  >> /etc/apt/sources.list
If_Error_Exit "Can not add MariaDB repo to source ist"
update_change_log "/etc/apt/sources.list" "Added MariaDB repo in sources list"

# installing the database
# -----------------------------------------------------------------------------

info "... refreshing source list"
apt-get --assume-yes --quiet update                                           >> /dev/null
info "... installing MariaDB version ${MARIA_DB_VERSION}"
# generate a random password
MYSQL_ROOTPWD=`openssl rand -base64 12`
gather "MySQL Database Root password is: ${MYSQL_ROOTPWD}"
debconf-set-selections <<< "mariadb-server-10.0 mysql-server/root_password password ${MYSQL_ROOTPWD}"
debconf-set-selections <<< "mariadb-server-10.0 mysql-server/root_password_again password ${MYSQL_ROOTPWD}"
apt-get --assume-yes --quiet install mariadb-server php-mysql                >> /dev/null
If_Error_Exit "Databse installation failed!"
/etc/init.d/mysql start
If_Error_Exit "Failed to start database"

# configuring database
# -----------------------------------------------------------------------------

info "Configuring database"
info "... adding skip-networking"
sed -i "s/^\[mysqld\]$/\[mysqld]\n# ${CHANGE_STAMP} \nskip-networking\n# /" /etc/mysql/my.cnf
update_change_log "/etc/mysql/my.cnf" "Added 'skip-networking' option"
info "... configure PHP to use unix socket for database connection"
sed -i "s/^mysql.default_socket =.*$/# ${CHANGE_STAMP} \nmysql.default_socket = \/var\/run\/mysqld\/mysqld.sock/" $PHP_SERVER_CONFIG
update_change_log "$PHP_SERVER_CONFIG" "Mapped to MySQL Unix socket"
info "... restarting services"
service php7.2-fpm restart
/etc/init.d/mysql restart
If_Error_Exit "Failed to start database"


# create a new database with new user for the website
# -----------------------------------------------------------------------------

info "Generating create_database.sh script"

echo '#!/usr/bin/env bash' > /root/create_database.sh
echo '' >> /root/create_database.sh
echo '# check if root, if not get out' >> /root/create_database.sh
echo '' >> /root/create_database.sh
echo 'if [ `id -u` != "0" ]; then' >> /root/create_database.sh
echo '  echo "run as root"' >> /root/create_database.sh
echo '  exit 1' >> /root/create_database.sh
echo 'fi' >> /root/create_database.sh
echo '' >> /root/create_database.sh
echo '# check all the variables are passed as command line argument' >> /root/create_database.sh
echo '# if not, show a helpful message and get out' >> /root/create_database.sh
echo '' >> /root/create_database.sh
echo 'if [ $# -ne 4 ]; then' >> /root/create_database.sh
echo '  echo "wrong number of argument passed"' >> /root/create_database.sh
echo '  echo "$0 <root account name> <root password> <database name> <user name>"' >> /root/create_database.sh
echo '  exit 1' >> /root/create_database.sh
echo 'fi' >> /root/create_database.sh
echo '' >> /root/create_database.sh
echo '' >> /root/create_database.sh
echo '# get variables' >> /root/create_database.sh
echo '' >> /root/create_database.sh
echo 'MYSQL_TMPFILE="/tmp/add_new_database_file.sql"' >> /root/create_database.sh
echo 'MYSQL_ROOT_NAME="$1"' >> /root/create_database.sh
echo 'MYSQL_ROOT_PASS="$2"' >> /root/create_database.sh
echo 'MYSQL_NAME="$3"' >> /root/create_database.sh
echo 'MYSQL_USER="$4"' >> /root/create_database.sh
echo 'MYSQL_PASS=`openssl rand -base64 8`' >> /root/create_database.sh
echo ''  >> /root/create_database.sh
echo '# create a temp .sql file' >> /root/create_database.sh
echo '' >> /root/create_database.sh
echo 'touch $MYSQL_TMPFILE' >> /root/create_database.sh
echo 'echo "CREATE DATABASE ${MYSQL_NAME} CHARACTER SET \"utf8\";" >> $MYSQL_TMPFILE' >> /root/create_database.sh
echo 'echo "CREATE USER ${MYSQL_USER}@127.0.0.1 IDENTIFIED BY \"${MYSQL_PASS}\";" >> $MYSQL_TMPFILE' >> /root/create_database.sh
echo 'echo "CREATE USER ${MYSQL_USER}@localhost IDENTIFIED BY \"${MYSQL_PASS}\";" >> $MYSQL_TMPFILE' >> /root/create_database.sh
echo 'echo "GRANT ALL PRIVILEGES ON ${MYSQL_NAME}.* TO ${MYSQL_USER}@127.0.0.1;" >> $MYSQL_TMPFILE' >> /root/create_database.sh
echo 'echo "GRANT ALL PRIVILEGES ON ${MYSQL_NAME}.* TO ${MYSQL_USER}@localhost;" >> $MYSQL_TMPFILE' >> /root/create_database.sh
echo 'echo "flush privileges;" >> $MYSQL_TMPFILE' >> /root/create_database.sh
echo '' >> /root/create_database.sh
echo 'cat $MYSQL_TMPFILE | mysql -u${MYSQL_ROOT_NAME} -p${MYSQL_ROOT_PASS} ' >> /root/create_database.sh
echo '' >> /root/create_database.sh
echo 'if [ $? -ne 0 ]; then' >> /root/create_database.sh
echo '  echo "Failed to create databse with new user"' >> /root/create_database.sh
echo '  rm $MYSQL_TMPFILE' >> /root/create_database.sh
echo '  exit 1' >> /root/create_database.sh
echo 'else' >> /root/create_database.sh
echo '  rm $MYSQL_TMPFILE' >> /root/create_database.sh
echo '  echo "Database $MYSQL_NAME created with user $MYSQL_USER and password $MYSQL_PASS"' >> /root/create_database.sh
echo 'fi' >> /root/create_database.sh
echo '' >> /root/create_database.sh
echo '' >> /root/create_database.sh

# using create_database.sh to create a new database
info "creating new user databse ${SITEUSER}_v1"
bash /root/create_database.sh root ${MYSQL_ROOTPWD} ${SITEUSER}_v1 ${SITEUSER}_u1 > /tmp/database_details_tmp
If_Error_Exit "Can not create user database"
USER_DB_PASS=`cat /tmp/database_details_tmp | rev | cut -d' ' -f1 | rev`
gather "A new database ${SITEUSER}_v1 for user ${SITEUSER}_u1 (with password ${USER_DB_PASS}) created in MySQL"
gather "Use the script /root/create_database.sh later for adding new databases"
rm -f /tmp/database_details_tmp

# changing permissions to read me files
chmod 0600 /root/you_must_read_me.txt
chmod 0600 /root/system_change_log
chmod 0700 /root/create_database.sh






#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
#                          Strengthening SSH                                  #
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#

info "Strengthening SSH connection"
if [ "${SSH_PORT}" != "" ]; then
  info "... changing default port"
  sed -i "s/^#Port 22.*$/# ${CHANGE_STAMP} \nPort ${SSH_PORT}/" /etc/ssh/sshd_config
  update_change_log "/etc/ssh/sshd_config" "Change SSH port to ${SSH_PORT}"
  gather "SSH port changed to ${SSH_PORT}"
fi


#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
#                          Activate Firewall                                  #
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#

info "Activating the firewall"
info "... setting basic deny rule for all incoming requests"
ufw default deny incoming
ufw default allow outgoing
info "... allowing ssh access from any"
ufw allow ${SSH_PORT}/tcp
info "... allowing http traffic from any"
ufw allow ${PORT}/tcp
ufw allow ${SSL_PORT}/tcp
info "... enabling firewall logging"
ufw logging on


#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
#                          Install PHP Composer                               #
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#

if [ $COMPOSER -eq 1 ]; then

  info "Trying to install composer for PHP..."
  apt-get install --assume-yes --quiet unzip  >>/dev/null
  apt-get install --assume-yes --quiet php-mbstring php-xml php-zip >>/dev/null
  cd /root/
  # php -r "copy('https://getcomposer.org/installer', '/root/composer-setup.php');"
  # php -r "if (hash_file('SHA384', 'composer-setup.php') === '544e09ee996cdf60ece3804abc52599c22b1f40f4323403c44d44fdfdd586475ca9813a858088ffbc1f233e9b180f061') { echo 'Installer verified'; } else { echo 'Installer corrupt'; unlink('composer-setup.php'); } echo PHP_EOL;"
  # php composer-setup.php
  # php -r "unlink('composer-setup.php');"
  # mv /root/composer.phar /usr/local/bin/composer

  EXPECTED_SIGNATURE="$(wget -q -O - https://composer.github.io/installer.sig)"
  php -r "copy('https://getcomposer.org/installer', 'composer-setup.php');"
  ACTUAL_SIGNATURE="$(php -r "echo hash_file('SHA384', 'composer-setup.php');")"

  if [ "$EXPECTED_SIGNATURE" != "$ACTUAL_SIGNATURE" ]
  then
      >&2 echo 'ERROR: Invalid installer signature'
      rm composer-setup.php
      exit 1
  fi

  php composer-setup.php --quiet
  mv /root/composer.phar /usr/local/bin/composer
  rm composer-setup.php

  If_Error_Exit "Failed to load composer."
  info "Composer installed"
fi


#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
#                          Install LARAVEL                                    #
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#

if [ $LARAVEL -eq 1 ]; then

  info "Trying to install laravel installer via composer ..."
  /usr/local/bin/composer global require "laravel/installer"
  PATH=$PATH:~/.config/composer/vendor/bin/

  info "Now you can use laravel command to create a new site"
fi


#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
#                          Install REDIS                                    #
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#

if [ $REDIS -eq 1 ]; then

  info "Trying to install redis server ..."
  apt-get --assume-yes --quiet install redis-server
  info "... changing default port"
  sed -i "s/^# requirepass foobared.*$/# ${CHANGE_STAMP} \nrequirepass foobared/" /etc/redis/redis.conf
  update_change_log "/etc/redis/redis.conf" "Set requirepass to default"
  info "Redis installed"
fi


#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
#                          Activate SSL                                       #
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#

if [ $SSL -eq 1 ]; then
  # adding certbot repo to Ubuntu's source
  info "Adding Certbot repo to Ubuntu's source"
  add-apt-repository --yes ppa:certbot/certbot                    2>&1 1> /dev/null
  info "Installing certbot"
  apt-get --assume-yes --quiet update                                  >> /dev/null
  apt-get --assume-yes --quiet install python-certbot-nginx            >> /dev/null
  If_Error_Exit "Unable to install certbot"
  info "Certbot Installed"
  info "... obtaining SSL certificate"
  certbot --nginx -d ${SITENAME} -d www.${SITENAME}
  If_Error_Exit "Can not obtain certificate"
  info "... allowing http traffic from any"
  certbot renew --dry-run
  If_Error_Exit "Can not renew certificate"
  info "... renew certificate successful"
fi


#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
#                          Finalizing the setup                               #
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#

if [ "22" != "${SSH_PORT}" ]; then
  info "YOUR CURRENT SSH SESSION MAY GET DISRUPTED. IF THAT HAPPENS, SSH TO PORT $SSH_PORT AFTER 2 MIN"
fi
gather "Firewall is configured. SSH access enabled at port $SSH_PORT"
service ssh restart
ufw --force enable

info "All Done! Rebooting..."
# Reboot services
#reboot